<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中-->
   <!-- <context:component-scan base-package="com.ittest"></context:component-scan>-->



    <!--把对象的创建叫给spring创建    在spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的是默认构造函数
    创建bean对象，此时如果类种没有构造函数，则对象午发创建-->
    <!--<bean id="accountService" class="com.ittest.service.impl.AccountServiceImpl3"></bean>-->
    <!--<bean id="accountDao" class="com.ittest.dao.impl.AccountDaoImpl"></bean>
     -->
    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
<!--    <bean id="instanseFactory" class="com.ittest.factory.InstanseFactory"></bean>
    <bean id="accountService" factory-bean="instanseFactory" factory-method="getAccountService"></bean>-->
    <!--使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
   -->
   <!-- <bean id="accountService" class="com.ittest.factory.StaticFactory" factory-method="getAccountService" ></bean>-->
    <!--bean的作用范围
    scope属性  取值  singleton 单例   prototype 多例  request 请求范围 session作用于应用的会话范围  global session作用于集群的绘画范围-->
   <!--单例对象
   出生：  容器创建    活着：   只要容器还在  对象一直活着   死亡：   容器销毁 对象消亡   对象的生命周期和容器相同
   多例对象  出生：当我们使用对象时spring框架为我们创建    或者：对象只要在我们使用或称中就一直活着，死亡：当对象长时间不用   且没有别的对象引用时，由java的垃圾回收器回收
   -->
    <!--<bean id="accountService" class="com.ittest.service.impl.AccountServiceImpl" scope="prototype" init-method="init" destroy-method="destory"></bean>-->
    <!--依赖注入  能注入的数据有三类：
    基本类型和String
    其他bean类型
    复杂类型/集合类型
    注入的方式，有三种
    第一种：使用构造函数提供
    二：set方法
    三 ：注解提供
    -->
    <!--构造函数注入
    使用的标签：constructor-arg
    标签内部的位置：bean标签的内部
    标签的属性：type   index   name(常用) value ref(指定其他的bean类型数据)
    优势：在获取bean对象时，注入数据是必须的操作，否则对象午发创建成功
    弊端：改变了bean对象的实例化方式，是我们在创建对象时，如果用不到这些数据，也必须创建
    -->
<!--   <bean id="accountService" class="com.ittest.service.impl.AccountServiceImpl">
       <constructor-arg name="name" value="安安"></constructor-arg>
       <constructor-arg name="age" value="2"></constructor-arg>
       <constructor-arg name="date" ref="now"></constructor-arg>
   </bean>-->
    <!--<bean id="now" class="java.util.Date"></bean>-->
    <!--set注入
     标签：property
     出现的位置 bean的内部
     标签的属性：name   value   ref
     优势：创建对象没有明确的限制，可以直接使用默认的构造函数
     弊端：如果某个成员必须有值，则获取对象有可能set方法美哟执行-->
<!--    <bean id="accountService2" class="com.ittest.service.impl.AccountServiceImpl2">
        <property name="name" value="黄熙雯"></property>
        <property name="age" value="3"></property>
        <property name="date" ref="now"></property>
    </bean>-->
    <!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中-->
<!--    <context:component-scan base-package="com.ittest"></context:component-scan>-->
    <!--配置QueryRunner-->
    <!--<bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        &lt;!&ndash;注入数据源&ndash;&gt;
        <constructor-arg name="ds" ref="dataSource"></constructor-arg>
    </bean>

    &lt;!&ndash; 配置数据源 &ndash;&gt;
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        &lt;!&ndash;连接数据库的必备信息&ndash;&gt;
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy?serverTimezone=UTC"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
    </bean>-->
</beans>